/** @format */
'use strict';
import crypto from 'crypto';
import readConfigFile from './readConfigFile.js';
import { Buffer } from 'buffer';
const key = 'h@u37.jd7J&#8Jsi^##>(+.:#hshqpb';
/*
utilizar mac adress para bloquear el dispocitivo donde se pueda desbloquear la
db
*/
function code(str) {
    var _a, _b;
    if (!((_b = (_a = readConfigFile()) === null || _a === void 0 ? void 0 : _a.LOCK) !== null && _b !== void 0 ? _b : false))
        return str;
    let _str = btoa(str);
    const output = [];
    for (let i = 0; i < _str.length; i++) {
        let bin = _str[i].charCodeAt(0).toString(2);
        output.push(Array(8 - bin.length + 1).join('0') + bin);
    }
    return output.join(' ');
}
function encode(str) {
    var _a, _b;
    if (!((_b = (_a = readConfigFile()) === null || _a === void 0 ? void 0 : _a.LOCK) !== null && _b !== void 0 ? _b : false))
        return str;
    let _str = new String(str);
    let binString = '';
    _str
        .split(' ')
        .map((bin) => (binString += String.fromCharCode(parseInt(bin, 2))));
    return atob(binString);
}
export function encript(text) {
    var _a, _b;
    if (!((_b = (_a = readConfigFile()) === null || _a === void 0 ? void 0 : _a.LOCK) !== null && _b !== void 0 ? _b : false))
        return text;
    const iv = crypto.randomBytes(16);
    const encription = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);
    let _encript = encription.update(text);
    _encript = Buffer.concat([_encript, encription.final()]);
    return code(iv.toString('hex') + ':' + _encript.toString('hex'));
}
export function desencript(text) {
    var _a, _b;
    if (!((_b = (_a = readConfigFile()) === null || _a === void 0 ? void 0 : _a.LOCK) !== null && _b !== void 0 ? _b : false))
        return text;
    const piece = encode(text).split(':');
    const iv = Buffer.from(piece[0], 'hex');
    const cifrado = Buffer.from(piece[1], 'hex');
    const encription = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);
    let textDencriptor = encription.update(cifrado);
    textDencriptor = Buffer.concat([textDencriptor, encription.final()]);
    return textDencriptor.toString();
}
