var _a, _b, _c, _d;
import { /*encript,*/ desencript } from './locks.js';
import readConfigFile from './readConfigFile.js';
import { errors } from './errors.js';
import fs from 'fs';
//
const datafileName = (_b = (_a = readConfigFile()) === null || _a === void 0 ? void 0 : _a.DB_NAME) !== null && _b !== void 0 ? _b : 'datafile';
const isDebelopment = (_d = (_c = readConfigFile()) === null || _c === void 0 ? void 0 : _c.IS_DEVELOPMENT) !== null && _d !== void 0 ? _d : false;
const fullDataConfiFile = `./${datafileName}.daj.${isDebelopment ? 'json' : 'db'}`;
//
export default function readFile(callback) {
    fs.readFile(fullDataConfiFile, (err, data) => {
        if (err) {
            callback(errors.notDataAccess('readFile', 12), null);
        }
        else {
            let newObj = {};
            let isError = false;
            try {
                newObj = JSON.parse(desencript(data.toString()));
            }
            catch (err) {
                isError = true;
                callback(errors.notData('readFile', 21), null);
            }
            if (!isError)
                callback(null, newObj);
        }
    });
}
